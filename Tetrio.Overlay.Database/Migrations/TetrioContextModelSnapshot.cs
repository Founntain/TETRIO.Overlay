// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tetrio.Overlay.Database;

#nullable disable

namespace Tetrio.Overlay.Database.Migrations
{
    [DbContext(typeof(TetrioContext))]
    partial class TetrioContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("ChallengeRun", b =>
                {
                    b.Property<Guid>("ChallengesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RunsId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChallengesId", "RunsId");

                    b.HasIndex("RunsId");

                    b.ToTable("ChallengeRun", (string)null);
                });

            modelBuilder.Entity("ChallengeUser", b =>
                {
                    b.Property<Guid>("ChallengesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChallengesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ChallengeUser", (string)null);
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.Challenge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mods")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Date", "Points")
                        .IsUnique();

                    b.ToTable("Challenges", (string)null);
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.ChallengeCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ChallengeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("ChallengeConditions", (string)null);
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.CommunityChallenge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ConditionType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Finished")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("TargetValue")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("StartDate")
                        .IsUnique();

                    b.ToTable("CommunityChallenges", (string)null);
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.CommunityContribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<Guid>("CommunityChallengeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommunityChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityContributions", (string)null);
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.ConditionRange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ConditionType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Max")
                        .HasColumnType("REAL");

                    b.Property<double>("Min")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConditionType", "Difficulty")
                        .IsUnique();

                    b.ToTable("ConditionRanges", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111001"),
                            ConditionType = 0,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 0,
                            Max = 5000000.0,
                            Min = 1000000.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111002"),
                            ConditionType = 1,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 0,
                            Max = 15000.0,
                            Min = 10000.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111003"),
                            ConditionType = 4,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 0,
                            Max = 100000.0,
                            Min = 50000.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111004"),
                            ConditionType = 2,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 0,
                            Max = 2000000.0,
                            Min = 1000000.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111005"),
                            ConditionType = 3,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 0,
                            Max = 4000000.0,
                            Min = 1000000.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111006"),
                            ConditionType = 5,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 0,
                            Max = 1000000.0,
                            Min = 500000.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111007"),
                            ConditionType = 6,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 0,
                            Max = 10000.0,
                            Min = 5000.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111008"),
                            ConditionType = 7,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 0,
                            Max = 1500000.0,
                            Min = 750000.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111009"),
                            ConditionType = 8,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 0,
                            Max = 0.0,
                            Min = 0.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111101"),
                            ConditionType = 0,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 2,
                            Max = 350.0,
                            Min = 50.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111102"),
                            ConditionType = 1,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 2,
                            Max = 1.0,
                            Min = 0.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111103"),
                            ConditionType = 4,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 2,
                            Max = 0.0,
                            Min = 0.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111104"),
                            ConditionType = 2,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 2,
                            Max = 10.0,
                            Min = 3.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111105"),
                            ConditionType = 3,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 2,
                            Max = 0.0,
                            Min = 0.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111106"),
                            ConditionType = 5,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 2,
                            Max = 20.0,
                            Min = 10.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111107"),
                            ConditionType = 6,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 2,
                            Max = 1.0,
                            Min = 0.75,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111108"),
                            ConditionType = 7,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 2,
                            Max = 40.0,
                            Min = 30.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111109"),
                            ConditionType = 8,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 2,
                            Max = 50.0,
                            Min = 35.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111201"),
                            ConditionType = 0,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 3,
                            Max = 650.0,
                            Min = 350.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111202"),
                            ConditionType = 1,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 3,
                            Max = 2.0,
                            Min = 1.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111203"),
                            ConditionType = 4,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 3,
                            Max = 1.0,
                            Min = 0.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111204"),
                            ConditionType = 2,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 3,
                            Max = 15.0,
                            Min = 5.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111205"),
                            ConditionType = 3,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 3,
                            Max = 30.0,
                            Min = 5.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111206"),
                            ConditionType = 5,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 3,
                            Max = 55.0,
                            Min = 20.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111207"),
                            ConditionType = 6,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 3,
                            Max = 1.6499999999999999,
                            Min = 1.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111208"),
                            ConditionType = 7,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 3,
                            Max = 100.0,
                            Min = 40.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111209"),
                            ConditionType = 8,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 3,
                            Max = 65.0,
                            Min = 50.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111301"),
                            ConditionType = 0,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 5,
                            Max = 1350.0,
                            Min = 650.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111302"),
                            ConditionType = 1,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 5,
                            Max = 5.0,
                            Min = 2.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111303"),
                            ConditionType = 4,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 5,
                            Max = 3.0,
                            Min = 1.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111304"),
                            ConditionType = 2,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 5,
                            Max = 20.0,
                            Min = 10.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111305"),
                            ConditionType = 3,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 5,
                            Max = 75.0,
                            Min = 30.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111306"),
                            ConditionType = 5,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 5,
                            Max = 100.0,
                            Min = 55.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111307"),
                            ConditionType = 6,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 5,
                            Max = 2.1000000000000001,
                            Min = 1.6499999999999999,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111308"),
                            ConditionType = 7,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 5,
                            Max = 175.0,
                            Min = 100.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111309"),
                            ConditionType = 8,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 5,
                            Max = 80.0,
                            Min = 65.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111401"),
                            ConditionType = 0,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 8,
                            Max = 2500.0,
                            Min = 1350.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111402"),
                            ConditionType = 1,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 8,
                            Max = 5.0,
                            Min = 3.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111403"),
                            ConditionType = 4,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 8,
                            Max = 6.0,
                            Min = 3.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111404"),
                            ConditionType = 2,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 8,
                            Max = 30.0,
                            Min = 20.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111405"),
                            ConditionType = 3,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 8,
                            Max = 125.0,
                            Min = 75.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111406"),
                            ConditionType = 5,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 8,
                            Max = 130.0,
                            Min = 85.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111407"),
                            ConditionType = 6,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 8,
                            Max = 2.5,
                            Min = 2.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111408"),
                            ConditionType = 7,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 8,
                            Max = 200.0,
                            Min = 150.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111409"),
                            ConditionType = 8,
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 8,
                            Max = 100.0,
                            Min = 80.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.Mod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MinDifficulty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Scaling")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Mods", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111101"),
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinDifficulty = 5,
                            Name = "expert",
                            Scaling = 0.75,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = (byte)60
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111102"),
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinDifficulty = 2,
                            Name = "nohold",
                            Scaling = 0.90000000000000002,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = (byte)25
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111103"),
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinDifficulty = 2,
                            Name = "messy",
                            Scaling = 1.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = (byte)25
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111104"),
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinDifficulty = 3,
                            Name = "gravity",
                            Scaling = 1.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = (byte)30
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111105"),
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinDifficulty = 3,
                            Name = "volatile",
                            Scaling = 1.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = (byte)25
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111106"),
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinDifficulty = 3,
                            Name = "doublehole",
                            Scaling = 1.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = (byte)25
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111107"),
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinDifficulty = 5,
                            Name = "invisible",
                            Scaling = 1.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = (byte)60
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111108"),
                            CreatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinDifficulty = 3,
                            Name = "allspin",
                            Scaling = 1.0,
                            UpdatedAt = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = (byte)40
                        });
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.Run", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<ushort>("AllClears")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Altitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Apm")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Finesse")
                        .HasColumnType("REAL");

                    b.Property<byte>("KOs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mods")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PlayedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Pps")
                        .HasColumnType("REAL");

                    b.Property<ushort>("Quads")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SpeedrunCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SpeedrunSeen")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Spins")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TetrioId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalTime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Vs")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("TetrioId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Runs", (string)null);
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscordId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRestricted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastSubmission")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SessionToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("TetrioId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.HasIndex("SessionToken")
                        .IsUnique();

                    b.HasIndex("TetrioId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.ZenithSplit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint>("ArenaReachedAt")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CasinoReachedAt")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CoreReachedAt")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CorruptionReachedAt")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<uint>("HotelReachedAt")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("LaboratoryReachedAt")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MuseumReachedAt")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("OfficesReachedAt")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("PlatformOfTheGodsReachedAt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TetrioId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TetrioId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ZenithSplits", (string)null);
                });

            modelBuilder.Entity("ChallengeRun", b =>
                {
                    b.HasOne("Tetrio.Overlay.Database.Entities.Challenge", null)
                        .WithMany()
                        .HasForeignKey("ChallengesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tetrio.Overlay.Database.Entities.Run", null)
                        .WithMany()
                        .HasForeignKey("RunsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChallengeUser", b =>
                {
                    b.HasOne("Tetrio.Overlay.Database.Entities.Challenge", null)
                        .WithMany()
                        .HasForeignKey("ChallengesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tetrio.Overlay.Database.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.ChallengeCondition", b =>
                {
                    b.HasOne("Tetrio.Overlay.Database.Entities.Challenge", "Challenge")
                        .WithMany("Conditions")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.CommunityContribution", b =>
                {
                    b.HasOne("Tetrio.Overlay.Database.Entities.CommunityChallenge", "CommunityChallenge")
                        .WithMany("Contributions")
                        .HasForeignKey("CommunityChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tetrio.Overlay.Database.Entities.User", "User")
                        .WithMany("CommunityContributions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityChallenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.Run", b =>
                {
                    b.HasOne("Tetrio.Overlay.Database.Entities.User", "User")
                        .WithMany("Runs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.ZenithSplit", b =>
                {
                    b.HasOne("Tetrio.Overlay.Database.Entities.User", "User")
                        .WithMany("Splits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.Challenge", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.CommunityChallenge", b =>
                {
                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("Tetrio.Overlay.Database.Entities.User", b =>
                {
                    b.Navigation("CommunityContributions");

                    b.Navigation("Runs");

                    b.Navigation("Splits");
                });
#pragma warning restore 612, 618
        }
    }
}
